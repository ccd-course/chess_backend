# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches:
      - main
      - develop
    
  pull_request:
    branches:
      - main
      - develop

jobs:
  Compile:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: maven

    - name: Compile with Maven
      run: mvn compile

  Sonarcloud:
    name: Sonarcloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ccd-course_chess_backend

  PMD:
    name: Run code analyzer PMD
    needs: [ Compile ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven
      - name: Run PMD command
        run: mvn pmd:pmd
      - name: Generate CMD Artifact
        uses: actions/upload-artifact@v1
        with:
          name: PMDResult
          path: target/site/pmd.html

  Tests:
    needs: [ Compile ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven
      - name: Test with Maven
        run: mvn test
      - name: Generate Test Reports
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Reports
          path: target/surefire-reports/*.xml
          reporter: java-junit
      - name: Generate Test Coverage Artifact
        uses: actions/upload-artifact@v1
        if: success() || failure()
        with:
          name: TestCoverage
          path: target/jacoco-report

  JavaDoc:
    needs: [ Compile ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        run: mvn javadoc:javadoc
      - uses: actions/upload-artifact@v1
        with:
          name: JavaDoc
          path: target/site/apidocs

  JavaDocs-gh-pages:
    name: Deploy JavaDocs on gh-pages
    runs-on: ubuntu-latest
    needs: JavaDoc
    if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download target dir from JavaDoc
        uses: actions/download-artifact@v2
        with:
          name: JavaDoc
          path: ./docs/apidocs

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/apidocs

  publish-job:
    runs-on: ubuntu-latest
    needs: [ Tests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Build maven package
        run: mvn -B package --file pom.xml

      - name: Show files in ./target directory
        run: dir target/

      - name: Copy generated jar to ./staging
        run: mkdir staging && cp target/backend-2.0.0.jar staging

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Package
          path: staging


  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    needs: publish-job
    if: ${{ github.event_name == 'push' && github.ref_name != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download staging dir from publish-job
        uses: actions/download-artifact@v2
        with:
          name: Package
          path: ./staging

      - name: Display structure of downloaded files
        run: ls -R

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        id: docker_build
        if: ${{ github.ref_name != 'main' }}
        with:
          # relative path to the place where source code with Dockerfile is located
          context: .
          # Note: tags has to be all lower-case
          tags: |
            valentinriess/chess_backend:${{ github.ref_name }} 
          # build on feature branches, push only on develop branch
          push: true

      - name: Image digest
        if: ${{ steps.docker_build.outcome == 'success' }}
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        id: docker_build_main
        if: ${{ github.ref_name == 'main' }}
        with:
          # relative path to the place where source code with Dockerfile is located
          context: .
          # Note: tags has to be all lower-case
          tags: |
            valentinriess/chess_backend:latest 
          # build on feature branches, push only on develop branch
          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        if: ${{ steps.docker_build_main.outcome == 'success' }}
        run: echo ${{ steps.docker_build_main.outputs.digest }}


  build-and-push-docker-image-docs:
    name: Build Docker image for docs server and push to repositories
    runs-on: ubuntu-latest
    needs: JavaDoc
    if: ${{ github.event_name == 'push' && github.ref_name != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download target dir from JavaDoc
        uses: actions/download-artifact@v2
        with:
          name: JavaDoc
          path: ./docs/apidocs

      - name: Display structure of downloaded files
        run: ls -R

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        id: docker_build
        if: ${{ github.ref_name != 'main' }}
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./docs
          # Note: tags has to be all lower-case
          tags: |
            valentinriess/chess_backend_docs:${{ github.ref_name }} 
          # build on feature branches, push only on develop branch
          push: true

      - name: Image digest
        if: ${{ steps.docker_build.outcome == 'success' }}
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        id: docker_build_main
        if: ${{ github.ref_name == 'main' }}
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./docs
          # Note: tags has to be all lower-case
          tags: |
            valentinriess/chess_backend_docs:latest 
          # build on feature branches, push only on develop branch
          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Image digest
        if: ${{ steps.docker_build_main.outcome == 'success' }}
        run: echo ${{ steps.docker_build_main.outputs.digest }}
  

  deploy:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Webhook Action
        # You may pin to the exact commit or the version.
        # uses: joelwmale/webhook-action@6f6298309b7aa21dc601d8c6271e0be055ce6f0e
        uses: joelwmale/webhook-action@2.1.0
        with:
          # The url to send the webhook event to
          url: https://watchtower.valentinriess.com/v1/update
          # Additional headers to send alongside the defaults
          headers: '{"Authorization": "${{ secrets.WEBHOOK_BEARER }}"}'
          # The data sent to the webhook
          body: ""
          # Enables calling to known self-signed or invalid SSL certificates
          insecure: False
